syntax = "proto3";

option go_package = "github.com/yelcat/llm-mesh";

package llm_mesh;

service ChatCompletionService {
  rpc ChatCompletion(ChatCompletionRequest) returns (stream ChatCompletionResponse) {}
}

message ChatCompletionMessage {
	string role = 1;
	string content = 2;

	// This property isn't in the official documentation, but it's in
	// the documentation for the official library for python:
	// - https://github.com/openai/openai-python/blob/main/chatml.md
	// - https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb
	string name = 3;
}

message ChatCompletionRequest {
	string model = 1;
	repeated ChatCompletionMessage messages = 2;
	uint32 max_tokens = 3;
	float temperature = 4;
	float top_p = 5;
	uint32 n = 6;
	bool stream = 7;
	repeated string stop = 8;
	float presence_penalty = 9;
	float frequency_penalty = 10;
	map<string,int64> logit_bias = 11;
	string User = 12;
}

message ChatCompletionResponse {
  oneof response {
    ChatCompletionStreamResponse stream = 1;
    CompletionResponse raw = 2;
  }
}

message ChatCompletionStreamChoiceDelta {
	string content = 1;
	string role = 2;
}

message ChatCompletionStreamChoice {
	int64 index = 1;
	ChatCompletionStreamChoiceDelta delta = 2;
	string finish_reason = 3;
}

message ChatCompletionStreamResponse {
  string id = 1;
	string object = 2;
	int64 created = 3;
	string model = 4;
	repeated ChatCompletionStreamChoice choices = 5;
}

message Usage {
	uint32 prompt_tokens = 1;
	uint32 completion_tokens = 2;
	uint32 total_tokens = 3;
}

message ChatCompletionChoice {
	int64 index = 1;
	ChatCompletionMessage message = 2;
	string finish_reason = 3;
}

message TopLogprob {
	map<string,float> top_logprob = 1;
}

message LogprobResult {
	repeated string             tokens = 1;
	repeated float            token_logprobs = 2;
	repeated TopLogprob top_logprobs = 3;
	repeated int32                text_offset = 4;
}

message CompletionChoice {
	string        text = 1;
	int64           index = 2;
	string        finish_reason = 3;
	LogprobResult logprobs = 4;
}

message CompletionResponse {
  string  id = 1;
	string object = 2;
	uint64 created = 3;
	string model = 4;
	repeated CompletionChoice choices = 5;
	Usage Usage = 6;
}




