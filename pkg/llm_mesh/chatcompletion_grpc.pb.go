// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: pkg/llm_mesh/chatcompletion.proto

package llm_mesh

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatCompletionService_ChatCompletion_FullMethodName = "/llm_mesh.ChatCompletionService/ChatCompletion"
)

// ChatCompletionServiceClient is the client API for ChatCompletionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatCompletionServiceClient interface {
	ChatCompletion(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (ChatCompletionService_ChatCompletionClient, error)
}

type chatCompletionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatCompletionServiceClient(cc grpc.ClientConnInterface) ChatCompletionServiceClient {
	return &chatCompletionServiceClient{cc}
}

func (c *chatCompletionServiceClient) ChatCompletion(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (ChatCompletionService_ChatCompletionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatCompletionService_ServiceDesc.Streams[0], ChatCompletionService_ChatCompletion_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatCompletionServiceChatCompletionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatCompletionService_ChatCompletionClient interface {
	Recv() (*ChatCompletionResponse, error)
	grpc.ClientStream
}

type chatCompletionServiceChatCompletionClient struct {
	grpc.ClientStream
}

func (x *chatCompletionServiceChatCompletionClient) Recv() (*ChatCompletionResponse, error) {
	m := new(ChatCompletionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatCompletionServiceServer is the server API for ChatCompletionService service.
// All implementations must embed UnimplementedChatCompletionServiceServer
// for forward compatibility
type ChatCompletionServiceServer interface {
	ChatCompletion(*ChatCompletionRequest, ChatCompletionService_ChatCompletionServer) error
	mustEmbedUnimplementedChatCompletionServiceServer()
}

// UnimplementedChatCompletionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatCompletionServiceServer struct {
}

func (UnimplementedChatCompletionServiceServer) ChatCompletion(*ChatCompletionRequest, ChatCompletionService_ChatCompletionServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatCompletion not implemented")
}
func (UnimplementedChatCompletionServiceServer) mustEmbedUnimplementedChatCompletionServiceServer() {}

// UnsafeChatCompletionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatCompletionServiceServer will
// result in compilation errors.
type UnsafeChatCompletionServiceServer interface {
	mustEmbedUnimplementedChatCompletionServiceServer()
}

func RegisterChatCompletionServiceServer(s grpc.ServiceRegistrar, srv ChatCompletionServiceServer) {
	s.RegisterService(&ChatCompletionService_ServiceDesc, srv)
}

func _ChatCompletionService_ChatCompletion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatCompletionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatCompletionServiceServer).ChatCompletion(m, &chatCompletionServiceChatCompletionServer{stream})
}

type ChatCompletionService_ChatCompletionServer interface {
	Send(*ChatCompletionResponse) error
	grpc.ServerStream
}

type chatCompletionServiceChatCompletionServer struct {
	grpc.ServerStream
}

func (x *chatCompletionServiceChatCompletionServer) Send(m *ChatCompletionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ChatCompletionService_ServiceDesc is the grpc.ServiceDesc for ChatCompletionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatCompletionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "llm_mesh.ChatCompletionService",
	HandlerType: (*ChatCompletionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatCompletion",
			Handler:       _ChatCompletionService_ChatCompletion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/llm_mesh/chatcompletion.proto",
}
